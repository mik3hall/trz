package us.hall.trz.osx;import java.io.IOException;import java.nio.file.LinkOption;import java.nio.file.Path;import java.awt.Color;import java.util.Arrays;import java.util.HashMap;import java.util.HashSet;import java.util.Map;import java.util.Set;public class Finder implements MacFinderFileAttributeView {   static final String CREATOR = "creator";   static final String TYPE = "type";   static final String INVISIBLE = "invisible";   static final String NAME_LOCKED = "name_locked";   static final String STATIONERY = "stationery";   static final String ALIAS = "alias";   static final String CUSTOM_ICON = "custom_icon";   static final String LOCKED = "locked";   static final String LABEL = "label";      // the names of the mac_finder attributes    static final Set<String> finderAttributeNames =       new HashSet<String>(Arrays.asList(new String[] {CREATOR,TYPE,INVISIBLE,NAME_LOCKED,STATIONERY,ALIAS,CUSTOM_ICON,LOCKED}));   Path file;   MacFinderInfo info;      Finder(Path file,boolean followLinks) {	   this.file = file;	   info = MacAttrUtils.getFinderInfo(file);   }      public Map<String,Object> readAttributes(String[] requested,LinkOption... options)   throws IOException   {      Map<String,Object> map = new HashMap<String,Object>();      for (String request : requested) {         final int colon = request.indexOf(":");      		 final String name;      		 if (colon == -1) {			name = request;		 }		 else {			String view = request.substring(0,colon);		    if (!request.substring(0, colon).equals("mac_finder"))		    	throw new IllegalArgumentException("Invalid view " + view + " not mac_finder");			name = request.substring(colon+1, request.length());		 }		 if ("*".equals(name)) {			map.putAll(readAttributes(new String[] {				"mac_finder:creator",				"mac_finder:type",				"mac_finder:invisible",				"mac_finder:name_locked",				"mac_finder:stationery",				"mac_finder:alias",				"mac_finder:custom_icon",				"mac_finder:locked",				"mac_finder:label"			}));		 }		 else {		    map.put(name, info.getAttribute(name));	     }	  }	      return map;   }	   public Set<FinderFlag> flags() {      HashSet<FinderFlag> finfo = new HashSet<FinderFlag>();      return finfo;   }	   @Override   public final String name() { return "mac_finder"; }	   public void setAttribute(String attribute, Object value,LinkOption... options) throws IOException {	  MacAttrUtils.setFinderInfo(file,attribute,value);   }	   public Color labelColor() { return null; }   public Set<FinderFlag> finderFlags() { return null; }	}