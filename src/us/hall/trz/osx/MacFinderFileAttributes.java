package us.hall.trz.osx;import java.io.IOException;import java.nio.file.Path;import java.nio.file.attribute.BasicFileAttributes;import java.nio.file.attribute.FileTime;public class MacFinderFileAttributes implements BasicFileAttributes {		Path p;		public MacFinderFileAttributes(MacPath mp) throws IOException {		this.p = mp;	}	///////// basic attributes ///////////	@Override	    public FileTime creationTime() {	    	return null;			// FIXME	/*	        if (e.ctime != -1)	            return FileTime.fromMillis(e.ctime);	        return null;	*/	    }	    @Override	    public boolean isDirectory() {	        return false;	    }	    @Override	    public boolean isOther() {	        return false;	    }	    @Override	    public boolean isRegularFile() {	        return !isDirectory();	    }	    @Override	    public FileTime lastAccessTime() {	    	return null;			// FIXME	/*	        if (e.atime != -1)	            return FileTime.fromMillis(e.atime);	        return null;	*/	    }	    @Override	    public FileTime lastModifiedTime() {	    	return null;	// FIXME	    }	    @Override	    public long size() {	    	return 0L;		// FIXME	    }	    @Override	    public boolean isSymbolicLink() {	        return false;	    }	    @Override	    public Object fileKey() {	        return null;	    }	    public String toString() {	    	return null;			// FIXME	/*	        StringBuilder sb = new StringBuilder(1024);	        Formatter fm = new Formatter(sb);	        if (creationTime() != null)	            fm.format("    creationTime    : %tc%n", creationTime().toMillis());	        else	            fm.format("    creationTime    : null%n");	        if (lastAccessTime() != null)	            fm.format("    lastAccessTime  : %tc%n", lastAccessTime().toMillis());	        else	            fm.format("    lastAccessTime  : null%n");	        fm.format("    lastModifiedTime: %tc%n", lastModifiedTime().toMillis());	        fm.format("    isRegularFile   : %b%n", isRegularFile());	        fm.format("    isDirectory     : %b%n", isDirectory());	        fm.format("    isSymbolicLink  : %b%n", isSymbolicLink());	        fm.format("    isOther         : %b%n", isOther());	        fm.format("    fileKey         : %s%n", fileKey());	        fm.format("    size            : %d%n", size());	        fm.format("    compressedSize  : %d%n", compressedSize());	        fm.format("    crc             : %x%n", crc());	        fm.format("    method          : %d%n", method());	        fm.close();	        return sb.toString();	*/	    }}