kqueue WatchService
--------------------

It runs a slightly modified version of the openjdk WatchService Basic tests with only one significant change. The code 
doesn't exit when done unless a System.exit(0) is added. I assume this is because the native kqueue thread is keeping
it from shutting down. 
Solutions would probably be either to go with a native runloop approach instead of thread or stop the thread whenever
the kqueue is empty and restart when something is added again.

I have seen it hang up once or twice right away at the start of a test in the register. Probably threading issues again. 
This implementation is perhaps more clumsy in this regard then the current implementations. It required synchronization
in a couple places where I didn't see anywhere current WatchService code needed it. 
More work may be needed before this completely thread safe.

It gets about nowhere running the LotsOfEvents test but I just added that today and don't know yet what it's even trying
to do. For heavier use I think FSEvents would probably be the preferred API anyhow. 

I believe the normal 'ant test' junit test runs aren't set up correctly.

Up to now I had been using pre-compiler checks that I think allowed the code to be compiled 32 bit. The current version
should be 64 bit only. The code now uses the kqueue user data field to contain two 32 bit values. The hash code of the
associated java WatchKey object and the fd. Coding native must be bringing the assembler programmer back out in me.
Give me a 64 bit long field and I will cram in two 32 bit values.

Licensing will probably need thinking about at some point. It uses Uli Kusterer code that has what I think amounts to an
MIT license, actually for some of the attributes native and the kqueue. The java side for the WatchService is modeled
pretty closely on the openjdk especially the abstract classes. I think the classpath exception allows me to use my own
license to cover this code. So I would probably choose MIT and include appropriate mention of Uli Kusterer.
But I really haven't looked at this a lot.

