package us.hall.trz.osx;import java.io.IOException;import java.nio.file.Path;import java.nio.file.Paths;import us.hall.osx.eio.FileManager;import static us.hall.trz.osx.Finder.*;import us.hall.trz.osx.ws.MacFileKey;public class MacAttrUtils {	static { System.loadLibrary("macattrs"); }		private static native MacFinderInfo getFinderInfo(String absolutePath);	private static native void setFinderInfo(String absolutePath,String attribute,Object value);	private static native MacLSInfo getLSInfo(String absolutePath);	private static native MacXAttrInfo getXAttrInfo(String absolutePath);	private static native MacCocoaInfo getCocoaInfo(String absolutePath);	private static native boolean isDirectory(String absolutePath);	private static native void fileSystemNumbers(String absolutePath,long[] fileSystemNums);		public static void main(String[] args) {		int ostypeCreator,ostypeType;		String fileName = null, creator = null, type = null;		if (args.length > 0)  {		// test with passed file name			if (args.length > 3) {				System.out.println("MacAttrUtils: too many parameters");				return;			}			try {				if (args.length == 2) {	// Passed a creator to use					creator = args[0];					type = "TEXT";		// Use default type					ostypeCreator = FileManager.OSTypeToInt(creator);					ostypeType = FileManager.OSTypeToInt(type);					fileName = args[1];					FileManager.setFileTypeAndCreator(fileName,ostypeType,ostypeCreator);				}				else if (args.length == 3) {					creator = args[0];					type = args[1];					fileName = args[2];					ostypeCreator = FileManager.OSTypeToInt(creator);					ostypeType = FileManager.OSTypeToInt(type);					fileName = args[1];					FileManager.setFileTypeAndCreator(fileName,ostypeType,ostypeCreator);				}				else fileName = args[0];			}			catch (IOException ioex) { ioex.printStackTrace(); }			MacFinderInfo info = getFinderInfo(new java.io.File(fileName).getAbsolutePath());			System.out.println("creator is " + info.getCreator());			System.out.println("type is " + info.getType());			System.out.println("locked is " + info.isLocked());			System.out.println("stationery is " + info.isStationery());			System.out.println("alias is " + info.isAlias());			System.out.println("label is " + info.getLabelColor());			System.out.println("has custom icon " + info.isCustomIcon());		}		else {			System.out.println("MacAttrUtils: missing or invalid argument");			return;		}	}		public static MacFinderInfo getFinderInfo(Path p) {		return getFinderInfo(p.toAbsolutePath().toString());	}		public static void setFinderInfo(Path p,String attribute,Object value) {		if (attribute.equals(CREATOR) || attribute.equals("type"))				value = new Integer(FileManager.OSTypeToInt((String)value));		else if (attribute.equals(LABEL)) value = new Short(LabelColor.shortValue((String)value));		else value = new Boolean((String)value);		setFinderInfo(p.toAbsolutePath().toString(),attribute,value);	}		public static MacLSInfo getLSInfo(Path p) {		return getLSInfo(p.toAbsolutePath().toString());	}		public static MacXAttrInfo getXAttrInfo(Path p) {		return getXAttrInfo(p.toAbsolutePath().toString());	}		public static MacCocoaInfo getCocoaInfo(Path p) {		return getCocoaInfo(p.toAbsolutePath().toString());	}		public static boolean isDirectory(Path p) {		return isDirectory(p.toAbsolutePath().toString());	}		public static MacFileKey fileKey(Path p) {		long[] fileSystemNums = new long[2];		fileSystemNumbers(p.toAbsolutePath().toString(),fileSystemNums);		return new MacFileKey(fileSystemNums[0],fileSystemNums[1]);	}}